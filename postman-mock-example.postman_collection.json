{
	"info": {
		"_postman_id": "f0900948-22a0-4903-80b2-437d81edfc0d",
		"name": "postman-mock-example",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28550067"
	},
	"item": [
		{
			"name": "Cases",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function randomString(min=5, max=10) {\r",
							"\r",
							"    let length = _.random(min, max)\r",
							"    let randomString = \"\";\r",
							"    for (let i = 0; i < length; i++){\r",
							"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");\r",
							"    }\r",
							"    return randomString;\r",
							"}\r",
							"\r",
							"function randomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"function randomBirthDate(){\r",
							"    const moment = require('moment');\r",
							"    let birthDay = pm.variables.replaceIn('{{$randomDateFuture}}');\r",
							"    return moment(birthDay).toISOString();\r",
							"}\r",
							"pm.variables.set('guid', pm.variables.replaceIn('{{$guid}}'))\r",
							"\r",
							"pm.variables.set('requestBody', {\r",
							"  code: randomString(),\r",
							"  name: randomString(3, 6),\r",
							"  productGroupId: pm.variables.replaceIn('{{$guid}}'),\r",
							"  BankAccount: pm.variables.replaceIn('{{$randomInt}}'),\r",
							"  FinanceSource: randomInt(1, 1000).toString(),\r",
							"  BirthDate: randomBirthDate(),\r",
							"  financeType: randomInt(100, 99999).toString(),\r",
							"  dateDifference: pm.variables.replaceIn('{{$randomInt}}'),\r",
							"  isActive: pm.variables.replaceIn('{{$randomBoolean}}')\r",
							"});\r",
							"\r",
							"\r",
							" const schemas={\r",
							"        \"case1\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\"id\"]\r",
							"        }, \r",
							"        \"case2\": {\r",
							"            type: 'object',\r",
							"            properties: {\r",
							"                error: {\r",
							"                    type: 'object',\r",
							"                    properties: {\r",
							"                        code: { type: 'string' },\r",
							"                        message: { type: 'string' },\r",
							"                        validationErrors: {\r",
							"                            type: 'array',\r",
							"                            items: {\r",
							"                                type: 'object',\r",
							"                                properties: {\r",
							"                                    message: { type: 'string' },\r",
							"                                    propertyName: { type: 'string' },\r",
							"                                    code: { type: 'string' },\r",
							"                                },\r",
							"                                required: ['message', 'propertyName', 'code'],\r",
							"                            },\r",
							"                        },\r",
							"                    },\r",
							"                    required: ['code', 'message', 'validationErrors'],\r",
							"                },\r",
							"            },\r",
							"            required: ['error'],\r",
							"        },\r",
							"        \"case3\": {\r",
							"            type: 'object',\r",
							"            properties: {\r",
							"                id: { type: 'string' },\r",
							"                code: { type: 'string' },\r",
							"                name: { type: 'string' },\r",
							"                description: { type: 'string' },\r",
							"                productGroupId: { type: 'string' },\r",
							"                fundingSource: { type: 'number' },\r",
							"                proposalValidityDay: { type: 'number' },\r",
							"                profitCalculationMethod: { type: 'number' },\r",
							"                financeType: { type: 'number' },\r",
							"                dateDifference: { type: 'number' },\r",
							"                isActive: { type: 'boolean' },\r",
							"                accountProductId: { type: 'string' }\r",
							"            },\r",
							"            required: ['id', 'code', 'name', 'description', 'productGroupId', 'fundingSource', 'proposalValidityDay', 'profitCalculationMethod', 'financeType', 'dateDifference', 'isActive', 'accountProductId']\r",
							"            },\r",
							"            \"case6\":{\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"error\": {\r",
							"                    \"type\": \"object\",\r",
							"                    \"properties\": {\r",
							"                        \"code\": {\r",
							"                        \"type\": \"string\"\r",
							"                        },\r",
							"                        \"message\": {\r",
							"                        \"type\": \"string\"\r",
							"                        }\r",
							"                    },\r",
							"                    \"required\": [\"code\", \"message\"]\r",
							"                    }\r",
							"                },\r",
							"                \"required\": [\"error\"]\r",
							"            }, \r",
							"            \"case8\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"error\": {\r",
							"                    \"type\": \"object\",\r",
							"                    \"properties\": {\r",
							"                        \"code\": {\r",
							"                        \"type\": \"string\"\r",
							"                        },\r",
							"                        \"message\": {\r",
							"                        \"type\": \"string\"\r",
							"                        }\r",
							"                    },\r",
							"                    \"required\": [\"code\", \"message\"]\r",
							"                    }\r",
							"                },\r",
							"                \"required\": [\"error\"]\r",
							"            }\r",
							"    }\r",
							"pm.variables.set('schemas', schemas)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const BASE_URL= \"https://787b4ca6-3ce1-4903-8150-90acc1c59914.mock.pstmn.io\";\r",
							"const API_KEY=\"<ENTER API KEY>\";\r",
							"\r",
							"async function makeRequest (url = '', method='POST', requestBody={}) {\r",
							"    const requestParams = {\r",
							"    method: method,\r",
							"    url: BASE_URL + url,\r",
							"    header: {\r",
							"        'Accept': 'application/json',\r",
							"        'x-api-key': API_KEY,\r",
							"    },\r",
							"    body: requestBody,\r",
							"    };\r",
							"    console.log('RequestBody: ', requestParams);\r",
							"    return new Promise((resolve, reject) => {\r",
							"            pm.sendRequest(requestParams, (err, res) => {\r",
							"                if (err) {\r",
							"                    reject(err);\r",
							"                } else {\r",
							"                    resolve(res);\r",
							"                }\r",
							"            });\r",
							"        });\r",
							"}\r",
							"\r",
							"const dgPay = {\r",
							"     case1: async () => {\r",
							"        try{\r",
							"\r",
							"            requestBody =  pm.variables.get('requestBody')\r",
							"            const response = await makeRequest('/dgpays', 'POST', requestBody);\r",
							"            \r",
							"            const id = response.json().id;\r",
							"            pm.collectionVariables.set('responseId', id);\r",
							"\r",
							"            const schema = pm.variables.get('schemas');\r",
							"            pm.response.to.have.jsonSchema(schema['case1'])\r",
							"            // Process the response\r",
							"            pm.expect(response.code).to.equal(200);\r",
							"            pm.expect(response.responseTime).to.be.below(1500);\r",
							"\r",
							"            console.log('Response:', response)\r",
							"        } catch (error) {\r",
							"            console.error('Error:', error);\r",
							"            pm.expect.fail(error);\r",
							"        }\r",
							"      }, \r",
							"     case2: async () => {\r",
							"        try{\r",
							"            requestBody =  pm.variables.get('requestBody')\r",
							"            Object.keys(requestBody).forEach(key => {\r",
							"                requestBody[key] = '';\r",
							"            });\r",
							"            requestBody.name = undefined;\r",
							"            \r",
							"            const response = await makeRequest('/dgpays', 'POST', requestBody);\r",
							"\r",
							"            // Process the response\r",
							"            pm.expect(response.code).to.equal(400);\r",
							"            \r",
							"            const schema = pm.variables.get('schemas');\r",
							"            pm.expect(response.json()).to.have.jsonSchema(schema['case2']);\r",
							"\r",
							"            console.log('Response:', response)\r",
							"        } catch (error) {\r",
							"            console.error('Error:', error);\r",
							"            pm.expect.fail(error);\r",
							"        }\r",
							"      },\r",
							"     case3: async () => {\r",
							"        try{\r",
							"\r",
							"            requestBody =  pm.variables.get('requestBody')\r",
							"            const response = await makeRequest('/dgpays/d78e8236-ef08-5f1c-a34b-de7ed4087b49', 'GET', requestBody);\r",
							"\r",
							"            const schema = pm.variables.get('schemas');\r",
							"           \r",
							"            pm.expect(response.json()[0]).to.have.jsonSchema(schema['case3'])\r",
							"            pm.expect(response.code).to.equal(200);\r",
							"            \r",
							"\r",
							"            console.log('Response:', response)\r",
							"        } catch (error) {\r",
							"            console.error('Error:', error);\r",
							"            pm.expect.fail(error);\r",
							"        }\r",
							"      }, \r",
							"     case4: async () => {\r",
							"        try{\r",
							"            requestBody =  pm.variables.get('requestBody')\r",
							"            const response = await makeRequest('/dgpays/empty', 'GET', requestBody);\r",
							"           \r",
							"            pm.expect(response.json()).to.be.empty;\r",
							"            pm.expect(response.code).to.equal(200);            \r",
							"\r",
							"            console.log('Response:', response)\r",
							"        } catch (error) {\r",
							"            console.error('Error:', error);\r",
							"            pm.expect.fail(error);\r",
							"        }\r",
							"      }, \r",
							"     case5: async () => {\r",
							"        try{\r",
							"            requestBody =  pm.variables.get('requestBody')\r",
							"            const response = await makeRequest('/dgpays/' + pm.collectionVariables.get('responseId'), 'PUT', requestBody);\r",
							"           \r",
							"            pm.expect(response.code).to.equal(200);\r",
							"            pm.expect(response.text()).to.equal('Basarili');\r",
							"\r",
							"            console.log('Response:', response)\r",
							"        } catch (error) {\r",
							"            console.error('Error:', error);\r",
							"            pm.expect.fail(error);\r",
							"        }\r",
							"      }, \r",
							"     case6: async () => {\r",
							"        try{\r",
							"            const response = await makeRequest('/dgpays/' + pm.variables.get('guid'), 'PUT',null);\r",
							"           \r",
							"            pm.expect(response.code).to.equal(405);\r",
							"            const schema = pm.variables.get('schemas');\r",
							"            pm.expect(response.json()).to.have.jsonSchema(schema['case6']);\r",
							"\r",
							"            console.log('Response:', response)\r",
							"        } catch (error) {\r",
							"            console.error('Error:', error);\r",
							"            pm.expect.fail(error);\r",
							"        }\r",
							"      }, \r",
							"     case7: async () => {\r",
							"        try{\r",
							"            const response = await makeRequest('/dgpays/' + pm.collectionVariables.get('responseId'), 'DELETE',null);\r",
							"           \r",
							"            pm.expect(response.code).to.equal(200);\r",
							"            pm.expect(response.text()).to.equal('Basarili');\r",
							"            // TODO: Mock server returns 200 for random guid\r",
							"\r",
							"            console.log('Response:', response)\r",
							"        } catch (error) {\r",
							"            console.error('Error:', error);\r",
							"            pm.expect.fail(error);\r",
							"        }\r",
							"      }, \r",
							"     case8: async () => {\r",
							"        try{\r",
							"            const response = await makeRequest('/dgpays/' + pm.variables.get('guid'), 'DELETE');\r",
							"           \r",
							"            pm.expect(response.code).to.equal(400);\r",
							"            const schema = pm.variables.get('schemas');\r",
							"            pm.expect(response.json()).to.have.jsonSchema(schema['case8']);\r",
							"\r",
							"            console.log('Response:', response)\r",
							"        } catch (error) {\r",
							"            console.error('Error:', error);\r",
							"            pm.expect.fail(error);\r",
							"        }\r",
							"      },\r",
							"};\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test('Case 1: POST method success check', dgPay.case1() );\r",
							"\r",
							"pm.test('Case 2: POST method error check', dgPay.case2() );\r",
							"\r",
							"pm.test('Case 3: GET method random check', dgPay.case3());\r",
							"\r",
							"pm.test('Case 4: GET method empty list check', dgPay.case4());\r",
							"\r",
							"pm.test('Case 5: PUT method update', dgPay.case5());\r",
							"\r",
							"pm.test('Case 6: PUT method error check', dgPay.case6());\r",
							"\r",
							"pm.test('Case 7: DELETE method success check', dgPay.case7());\r",
							"\r",
							"\r",
							"pm.test('Case 8: DELETE method error check', dgPay.case8());\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"code\": \"random string metot yaz\",\r\n  \"name\": \"3-6 karakter arası random string metot yaz\",\r\n  \"productGroupId\": \"guid Postman dinamik degisken kullan\",\r\n  \"BankAccount\": \"Postman dinamik degisken kullan\",\r\n  \"FinanceSource\":\"String içerisinde random int metod yaz\",\r\n  \"BirthDate\": \"1946-02-22T00:41:47 - bu formatta olacak şekilde random date metodunu yaz\",\r\n  \"financeType\": \"random 3-5 basamak arası int metot yaz\",\r\n  \"dateDifference\": \"random int psotman dinamik değişken kullan\",\r\n  \"isActive\": \"Boolean Postman dinamik degisken kullan\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://787b4ca6-3ce1-4903-8150-90acc1c59914.mock.pstmn.io/dgpays",
					"protocol": "https",
					"host": [
						"787b4ca6-3ce1-4903-8150-90acc1c59914",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"dgpays"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "responseId",
			"value": ""
		}
	]
}